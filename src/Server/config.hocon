config {
     admins = ["emperon@gmail.com","onur@outlook.com.tr"]
     akka.cluster.distributed-data.durable.lmdb= "shard-data"
     connection-string = "Data Source=Database/AlarmsGlobal.db;"
     akka {
          persistence {
               journal {
               plugin = "akka.persistence.journal.sql"
               sql {
                    class = "Akka.Persistence.Sql.Journal.SqlWriteJournal, Akka.Persistence.Sql"
                    connection-string = ${config.connection-string}
                    provider-name =  "SQLite.MS"
                    auto-initialize = true
               }
               }
               query.journal.sql {
               class = "Akka.Persistence.Sql.Query.SqlReadJournalProvider, Akka.Persistence.Sql"
               connection-string = ${config.connection-string}
               provider-name = "SQLite.MS"
               auto-initialize = true
               }
               snapshot-store {
               plugin = "akka.persistence.snapshot-store.sql"
               sql {
                    class = "Akka.Persistence.Sql.Snapshot.SqlSnapshotStore, Akka.Persistence.Sql"
                    connection-string = ${config.connection-string}
                    provider-name = "SQLite.MS"
                    auto-initialize = true
               }
               }
          }
          extensions = ["Akka.Cluster.Tools.PublishSubscribe.DistributedPubSubExtensionProvider,Akka.Cluster.Tools"]
          stdout-loglevel = INFO
          loglevel = INFO
          log-config-on-start = false
          loggers=["Akka.Logger.Serilog.SerilogLogger, Akka.Logger.Serilog"]
          logger-formatter="Akka.Logger.Serilog.SerilogLogMessageFormatter, Akka.Logger.Serilog"

          actor {
               debug {
                    receive = on
                    autoreceive = on
                    lifecycle = on
                    event-stream = on
                    unhandled = on
               }
               provider = "Akka.Cluster.ClusterActorRefProvider, Akka.Cluster"
               serializers {
                    json = "Akka.Serialization.NewtonSoftJsonSerializer"
                    stj = "FCQRS.ActorSerialization+STJSerializer, FCQRS"
               }
               serialization-bindings {
                    "System.Object" = json
                    "FCQRS.Common+ISerializable, FCQRS" = stj
               }
          }
          remote {
                    dot-netty.tcp {
                    public-hostname = "localhost"
                    hostname = "localhost"
                    port = 0
               }
          }
          cluster {
               pub-sub.send-to-dead-letters-when-no-subscribers = false
               sharding{
                    state-store-mode = ddata
                    remember-entities-store = eventsourced
               }
          }
     }
}